service:
  name: ${self:custom.name}

custom:
  ${file(./sls.config.js)}

plugins:
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  deploymentBucket:
    name: ${self:custom.bucket}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    REGION: ${opt:region, 'us-east-1'}

  iamRoleStatements:
  - Effect: Allow
    Action:
      - sqs:SendMessage
      - sqs:DeleteMessage
      - sqs:ReceiveMessage
    Resource:
      - Fn::GetAtt: [ deleteQueue, Arn ]
    # Resource: arn:aws:sqs:*:*:${self:custom.sqs}

resources:
  Resources:
    deleteQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        # MessageRetentionPeriod: 1209600
        # VisibilityTimeout: 60
        FifoQueue: true
        ContentBasedDeduplication: true
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt
            - deleteDLQ
            - Arn
          maxReceiveCount: 2

    deleteDLQ:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true

functions:
  # authorizer:
  #   handler: src/functions/authorizer.handler
  #   environment:
  #     JWT_SECRET: ${self:custom.jwtSecret}
  hello:
    handler: src/functions/hello.handler
    environment:
      DELETE_SQS:
        Ref: deleteQueue
    events:
      - http:
          method: get
          path: hello
          # authorizer: authorizer

  delConsumer:
    handler: src/functions/consumer.handler
    environment:
      DELETE_SQS:
        Ref: deleteQueue
    events:
      - sqs:
          # arn: Fn::GetAtt: [ deleteQueue, Arn ]
          arn: !GetAtt
            - deleteQueue
            - Arn
          batchSize: 1

  # teamsDelete:
  #   handler: src/functions/teams/delete.handler
  #   environment:
  #     TABLE_NAME: 'teamsTable'
  #   events:
  #     - http:
  #         method: delete
  #         path: draftTeams/{leagueAbbrev}/{id}
